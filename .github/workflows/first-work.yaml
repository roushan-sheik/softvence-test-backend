name: Deploy to EC2

on:
  push:
    branches: ["main"]

env:
  NODE_VERSION: "20.15.0"

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "npm"

      - name: Install dependencies
        run: npm ci

      - name: Run tests
        run: npm test || echo "‚ö†Ô∏è No tests found"
        continue-on-error: true

      - name: Build application
        run: npm run build

      - name: Configure SSH
        env:
          SSH_PRIVATE_KEY: ${{ secrets.EC2_SSH_PRIVATE_KEY }}
        run: |
          mkdir -p ~/.ssh
          echo "$SSH_PRIVATE_KEY" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          ssh-keyscan -H ${{ secrets.EC2_HOST }} >> ~/.ssh/known_hosts

      - name: Create backup on EC2
        env:
          EC2_HOST: ${{ secrets.EC2_HOST }}
          EC2_USER: ${{ secrets.EC2_USER }}
        run: |
          ssh $EC2_USER@$EC2_HOST << 'EOF'
            if [ -d ~/app ]; then
              BACKUP_DIR=~/app_backup_$(date +%Y%m%d_%H%M%S)
              echo "üì¶ Creating backup: $BACKUP_DIR"
              cp -r ~/app $BACKUP_DIR
              
              # Keep only last 5 backups
              ls -dt ~/app_backup_* 2>/dev/null | tail -n +6 | xargs rm -rf 2>/dev/null || true
            fi
          EOF

      - name: Deploy to EC2
        env:
          EC2_HOST: ${{ secrets.EC2_HOST }}
          EC2_USER: ${{ secrets.EC2_USER }}
          NODE_ENV: ${{ secrets.NODE_ENV }}
          PORT: ${{ secrets.PORT }}
          MONGO_URI: ${{ secrets.MONGO_URI }}
        run: |
          echo "üöÄ Starting deployment to $EC2_HOST"

          ssh $EC2_USER@$EC2_HOST "mkdir -p ~/app"

          echo "üì§ Uploading files to EC2..."
          rsync -avz --delete \
            --exclude='.git' \
            --exclude='node_modules' \
            --exclude='.github' \
            --exclude='src' \
            --exclude='*.ts' \
            --exclude='tsconfig.json' \
            --exclude='.env' \
            --exclude='.env.example' \
            --include='dist/**' \
            --include='package*.json' \
            . $EC2_USER@$EC2_HOST:~/app/

          echo "‚öôÔ∏è Configuring application on EC2..."
          ssh $EC2_USER@$EC2_HOST "NODE_ENV='$NODE_ENV' PORT='$PORT' MONGO_URI='$MONGO_URI'" bash << 'ENDSSH'

          export NVM_DIR="$HOME/.nvm"
          [ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"

          nvm use 20.15.0 2>/dev/null || nvm install 20.15.0

          cd ~/app

          echo "Creating .env file..."
          cat > .env << 'ENVFILE'NODE_ENV=${NODE_ENV}PORT=${PORT}MONGO_URI=${MONGO_URI}ENVFILE

          sed -i "s/\${NODE_ENV}/$NODE_ENV/g" .env
          sed -i "s/\${PORT}/$PORT/g" .env
          sed -i "s|\${MONGO_URI}|$MONGO_URI|g" .env

          echo "‚úÖ Environment file created"
          cat .env

          echo "üì¶ Installing dependencies..."
          npm ci --omit=dev --silent

          if ! command -v pm2 &> /dev/null; then
            echo "üì• Installing PM2..."
            npm install -g pm2
          fi

          echo "üîÑ Restarting application..."
          pm2 reload nodejs-app --update-env 2>/dev/null || pm2 start dist/index.js --name nodejs-app --time

          pm2 save
          pm2 list

          echo "‚úÖ Application deployed successfully!"ENDSSH

      - name: Health check
        env:
          EC2_HOST: ${{ secrets.EC2_HOST }}
          PORT: ${{ secrets.PORT }}
        run: |
          echo "üè• Performing health check..."
          sleep 10

          if curl -f --max-time 10 http://$EC2_HOST:$PORT/health 2>/dev/null; then
            echo "‚úÖ Health check passed!"
          elif curl -f --max-time 10 http://$EC2_HOST:$PORT/ 2>/dev/null; then
            echo "‚úÖ Application is responding!"
          else
            echo "‚ùå Health check failed!"
            exit 1
          fi

      - name: Rollback on failure
        if: failure()
        env:
          EC2_HOST: ${{ secrets.EC2_HOST }}
          EC2_USER: ${{ secrets.EC2_USER }}
        run: |
          echo "‚ö†Ô∏è Deployment failed! Rolling back..."

          ssh $EC2_USER@$EC2_HOST << 'ROLLBACK'
          export NVM_DIR="$HOME/.nvm"
          [ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"
          nvm use 20.15.0

          LATEST_BACKUP=$(ls -dt ~/app_backup_* 2>/dev/null | head -1)

          if [ -d "$LATEST_BACKUP" ]; then
            echo "üì¶ Restoring from backup: $LATEST_BACKUP"
            rm -rf ~/app
            cp -r $LATEST_BACKUP ~/app
            cd ~/app
            pm2 restart nodejs-app
            echo "‚úÖ Rollback completed!"
          else
            echo "‚ùå No backup found for rollback!"
          fiROLLBACK

      - name: Deployment summary
        if: always()
        run: |
          if [ ${{ job.status }} == 'success' ]; then
            echo "üéâ ================================"
            echo "üéâ Deployment Successful!"
            echo "üéâ ================================"
            echo "üìç Server: ${{ secrets.EC2_HOST }}"
            echo "üîó URL: http://${{ secrets.EC2_HOST }}:${{ secrets.PORT }}"
            echo "‚è∞ Time: $(date)"
          else
            echo "‚ùå ================================"
            echo "‚ùå Deployment Failed!"
            echo "‚ùå ================================"
            echo "üîÑ Application rolled back to previous version"
          fi
