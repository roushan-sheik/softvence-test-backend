name: Deploy to EC2 (Zero Downtime)

on:
  push:
    branches: ["main"]

env:
  NODE_VERSION: "20.15.0"

jobs:
  deploy:
    runs-on: ubuntu-latest
    timeout-minutes: 15

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "npm"

      - name: Install dependencies
        run: npm ci

      - name: Run tests
        run: npm test || echo "‚ö†Ô∏è No tests found"
        continue-on-error: false

      - name: Build application
        run: npm run build

      - name: Configure SSH
        env:
          SSH_PRIVATE_KEY: ${{ secrets.EC2_SSH_PRIVATE_KEY }}
        run: |
          mkdir -p ~/.ssh
          echo "$SSH_PRIVATE_KEY" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          ssh-keyscan -H ${{ secrets.EC2_HOST }} >> ~/.ssh/known_hosts

      - name: Create backup on EC2
        env:
          EC2_HOST: ${{ secrets.EC2_HOST }}
          EC2_USER: ${{ secrets.EC2_USER }}
        run: |
          ssh $EC2_USER@$EC2_HOST 'bash -s' << 'EOF'
          if [ -d ~/app ]; then
            BACKUP_DIR=~/app_backup_$(date +%Y%m%d_%H%M%S)
            echo "üì¶ Creating backup: $BACKUP_DIR"
            cp -r ~/app $BACKUP_DIR
            ls -dt ~/app_backup_* 2>/dev/null | tail -n +6 | xargs rm -rf 2>/dev/null || true
          fi
          EOF

      - name: Deploy to EC2 (Zero Downtime)
        env:
          EC2_HOST: ${{ secrets.EC2_HOST }}
          EC2_USER: ${{ secrets.EC2_USER }}
          NODE_ENV: ${{ secrets.NODE_ENV }}
          PORT: ${{ secrets.PORT }}
          MONGO_URI: ${{ secrets.MONGO_URI }}
        run: |
          echo "üöÄ Starting zero-downtime deployment to $EC2_HOST"

          ssh $EC2_USER@$EC2_HOST "mkdir -p ~/app"

          echo "üì§ Uploading files to EC2..."
          rsync -avz --delete \
            --exclude='.git' \
            --exclude='node_modules' \
            --exclude='.github' \
            --exclude='src' \
            --exclude='*.ts' \
            --exclude='tsconfig.json' \
            --exclude='.env' \
            --exclude='.env.example' \
            --include='dist/**' \
            --include='package*.json' \
            . $EC2_USER@$EC2_HOST:~/app/

          echo "‚öôÔ∏è Creating ecosystem file and deploying..."
          ssh $EC2_USER@$EC2_HOST bash <<ENDSSH
          export NVM_DIR="\$HOME/.nvm"
          [ -s "\$NVM_DIR/nvm.sh" ] && . "\$NVM_DIR/nvm.sh"

          nvm use 20.15.0 2>/dev/null || nvm install 20.15.0

          cd ~/app

          # Create ecosystem.config.js with actual values
          cat > ecosystem.config.js <<'ECOFILE'
          module.exports = {
            apps: [{
              name: 'nodejs-app',
              script: './dist/index.js',
              instances: 2,
              exec_mode: 'cluster',
              max_memory_restart: '500M',
              env_production: {
                NODE_ENV: '$NODE_ENV',
                PORT: '$PORT',
                MONGO_URI: '$MONGO_URI'
              }
            }]
          };
          ECOFILE

          echo "‚úÖ Ecosystem file created"
          cat ecosystem.config.js

          echo "üì¶ Installing dependencies..."
          npm ci --omit=dev --silent

          if ! command -v pm2 &> /dev/null; then
            echo "üì• Installing PM2..."
            npm install -g pm2
          fi

          echo "üîÑ Zero-downtime reload..."

          # Check if app exists
          if pm2 list | grep -q "nodejs-app"; then
            echo "Reloading existing app..."
            pm2 reload ecosystem.config.js --env production
            echo "‚úÖ Application reloaded (zero downtime)"
          else
            echo "Starting new app..."
            pm2 start ecosystem.config.js --env production
            echo "‚úÖ Application started in cluster mode"
          fi

          pm2 save

          echo "‚úÖ Deployment completed!"
          pm2 list
          pm2 info nodejs-app
          ENDSSH

      - name: Verify Deployment
        env:
          EC2_HOST: ${{ secrets.EC2_HOST }}
          EC2_USER: ${{ secrets.EC2_USER }}
          PORT: ${{ secrets.PORT }}
        run: |
          echo "üîç Verifying deployment..."
          sleep 10

          ssh $EC2_USER@$EC2_HOST 'bash -s' << 'EOF'
          export NVM_DIR="$HOME/.nvm"
          [ -s "$NVM_DIR/nvm.sh" ] && . "$NVM_DIR/nvm.sh"
          nvm use 20.15.0

          if pm2 list | grep -q "nodejs-app.*online"; then
            echo "‚úÖ Application is running in PM2!"
            
            # Check recent errors (last 10 lines only)
            RECENT_ERRORS=$(pm2 logs nodejs-app --lines 10 --nostream 2>/dev/null | grep -i "error" | wc -l)
            if [ "$RECENT_ERRORS" -gt 3 ]; then
              echo "‚ö†Ô∏è Found $RECENT_ERRORS recent errors in logs"
              pm2 logs nodejs-app --lines 10 --nostream
              exit 1
            fi
            
            pm2 info nodejs-app
            exit 0
          else
            echo "‚ùå Application failed to start!"
            pm2 logs nodejs-app --lines 30 --nostream
            exit 1
          fi
          EOF

          echo "Checking HTTP endpoint..."
          RESPONSE=$(curl -s -o /dev/null -w "%{http_code}" --max-time 10 http://$EC2_HOST:$PORT/ 2>/dev/null || echo "000")

          if [ "$RESPONSE" = "200" ] || [ "$RESPONSE" = "304" ]; then
            echo "‚úÖ HTTP check passed (Status: $RESPONSE)"
          else
            echo "‚ö†Ô∏è HTTP check returned status: $RESPONSE"
          fi

      - name: Monitor for 30 seconds
        env:
          EC2_HOST: ${{ secrets.EC2_HOST }}
          EC2_USER: ${{ secrets.EC2_USER }}
        run: |
          echo "üëÄ Monitoring application for 30 seconds..."

          for i in {1..6}; do
            ssh $EC2_USER@$EC2_HOST 'bash -s' << 'EOF'
            export NVM_DIR="$HOME/.nvm"
            [ -s "$NVM_DIR/nvm.sh" ] && . "$NVM_DIR/nvm.sh"
            nvm use 20.15.0
            
            STATUS=$(pm2 jlist | jq -r '.[] | select(.name=="nodejs-app") | .pm2_env.status')
            RESTARTS=$(pm2 jlist | jq -r '.[] | select(.name=="nodejs-app") | .pm2_env.restart_time')
            
            echo "Status: $STATUS | Restarts: $RESTARTS"
            
            if [ "$STATUS" != "online" ]; then
              echo "‚ùå App went offline!"
              exit 1
            fi
            EOF
            
            sleep 5
          done

          echo "‚úÖ Application stable for 30 seconds"

      - name: Rollback on failure
        if: failure()
        env:
          EC2_HOST: ${{ secrets.EC2_HOST }}
          EC2_USER: ${{ secrets.EC2_USER }}
        run: |
          echo "‚ö†Ô∏è Deployment failed! Rolling back..."

          ssh $EC2_USER@$EC2_HOST 'bash -s' << 'EOF'
          export NVM_DIR="$HOME/.nvm"
          [ -s "$NVM_DIR/nvm.sh" ] && . "$NVM_DIR/nvm.sh"
          nvm use 20.15.0

          LATEST_BACKUP=$(ls -dt ~/app_backup_* 2>/dev/null | head -1)

          if [ -d "$LATEST_BACKUP" ]; then
            echo "üì¶ Restoring from backup: $LATEST_BACKUP"
            rm -rf ~/app
            cp -r $LATEST_BACKUP ~/app
            cd ~/app
            pm2 reload ecosystem.config.js --env production || pm2 start ecosystem.config.js --env production
            echo "‚úÖ Rollback completed!"
            pm2 list
          else
            echo "‚ùå No backup found for rollback!"
          fi
          EOF

      - name: Deployment summary
        if: always()
        env:
          EC2_HOST: ${{ secrets.EC2_HOST }}
          PORT: ${{ secrets.PORT }}
        run: |
          if [ ${{ job.status }} == 'success' ]; then
            echo "üéâ ================================"
            echo "üéâ Zero-Downtime Deployment Success!"
            echo "üéâ ================================"
            echo "üìç Server: $EC2_HOST"
            echo "üîó URL: http://$EC2_HOST:$PORT"
            echo "‚è∞ Time: $(date)"
            echo "‚ú® No downtime during deployment"
          else
            echo "‚ùå ================================"
            echo "‚ùå Deployment Failed & Rolled Back!"
            echo "‚ùå ================================"
            echo "üìß Check logs and notify team"
          fi
